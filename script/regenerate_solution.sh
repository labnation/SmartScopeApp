#!/bin/bash -xe

SCRIPT=`basename $0`
SCRIPT_PATH=`dirname $0`
ROOT=${SCRIPT_PATH}/..

function usage {
    cat <<EOF
Usage:

$SCRIPT [-noclean]
   -o|--os <operating system>
   -c|--channel <channel>


Where:
       os       : Windows, MacOS, Linux, Android, iOS
       channel  : Release, Unstable, None
       -noclean : Don't clean content
EOF
    exit -1
}

OPSYS=""
CHANNEL=""
DOCLEAN=true

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -o|--os)
    OPSYS="$2"
    if [ $OPSYS != 'Android'   ] &&
       [ $OPSYS != 'Linux'     ] &&
       [ $OPSYS != 'MacOS'     ] &&
       [ $OPSYS != 'WindowsGL' ] &&
	   [ $OPSYS != 'Windows'   ] &&
       [ $OPSYS != 'iOS' ]; then
      usage
    fi
    shift
    ;;
    -c|--channel)
    CHANNEL="$2"
    shift
    ;;
    -noclean)
    DOCLEAN=false
    ;;
    *)
    echo Unknown option $key
    usage
    ;;
esac
shift
done

if [ -z $OPSYS ] || [ -z $CHANNEL ]; then
    usage
fi

cd "${ROOT}"

HOST=`uname`
if [[ x$HOST != xMINGW* ]] && [[ x$HOST != xMSYS_NT* ]]; then
	CMD_PREFIX="mono ./"
else
	CMD_PREFIX="./"
fi
echo Current directory: `pwd`

#Offset for version code for previously wrongly versioned versions
VERSION_CODE_OFFSET=11
GIT_TAG_PREFIX=release/
GIT_TAGS=( `git for-each-ref --sort=taggerdate --format '%(tag)' refs/tags/${GIT_TAG_PREFIX}` )
GIT_TAG=`git tag -l ${GIT_TAG_PREFIX}* --contains`
if [ -z ${GIT_TAG} ] || [ $CHANNEL = "Unstable" ]; then
  if [ $CHANNEL = "Release" ]; then
    echo cant build release, missing tag
    exit -1;
  fi
  VERSION_STRING_THREE_PARTS=`date "+%Y.%m%d.%H%M"`
  VERSION_STRING_THREE_PARTS_IOS=${VERSION_STRING_THREE_PARTS}
  VERSION_STRING=${VERSION_STRING_THREE_PARTS}.00
  VERSION_STRING_WIN=`date "+%y.%m.%d%H"`
  VERSION_CODE=$(expr `date +%s` / 30 )
elif [ ${GIT_TAG:0:${#GIT_TAG_PREFIX}} = ${GIT_TAG_PREFIX} ] && [ $CHANNEL = "Release" ]; then
  VERSION_STRING=${GIT_TAG:${#GIT_TAG_PREFIX}}
  VERSION_STRING_WIN=${VERSION_STRING%.*}
  VERSION_STRING_THREE_PARTS=${VERSION_STRING%.*}
  # For iOS, use beta versioning system, even in Release
  # since iTunes connect requires incremental version numbers
  # and uses the same system for both beta and release
  VERSION_STRING_THREE_PARTS_IOS=`date "+%Y.%m%d.%H%M"`
  #VERSION_CODE is used to get simple version number
  # for android. This method, where we just take the
  # number of release tags as version number, assumes
  # that a new release (i.e. a new tag) implies a later
  # version. It disallows releasing patches to old
  # versions which seems fine at the moment
  VERSION_CODE=-1
  for i in "${!GIT_TAGS[@]}"; do
     if [[ "${GIT_TAGS[$i]}" = "${GIT_TAG}" ]]; then
         VERSION_CODE=$((VERSION_CODE_OFFSET + i))
     fi
  done
  if [[ $VERSION_CODE = -1 ]]; then
    echo Unable to find version code
    exit -1;
  fi
else
  echo invalid tag - aborting build
  exit -1;
fi
echo $VERSION_STRING > version.txt
echo VERSION CODE = ${VERSION_CODE}

CMD_FIND=/usr/bin/find
CMD_CONVERT="${CONVERT_PATH}convert"

#Version files in SmartScope project
PRJ_DIR=./
ASSEMBLY_INFO="Properties/AssemblyInfo.cs"
MACOS_PLIST="Info.MacOS.plist"
MACOS_SERVER_UI_PLIST="DeviceInterface/examples/SmartScopeServerUI/Info.plist"
MACOS_SERVER_PLIST="DeviceInterface/examples/SmartScopeServer/Info.plist"
MACOS_CONSOLE_PLIST="DeviceInterface/examples/SmartScopeConsole/Info.plist"
IOS_PLIST="Info.iOS.plist"
ANDROID_MANIFEST="Properties/AndroidManifest.xml"
WIN_INSTALLER="Installer/Installer.vdproj"
WIN_INSTALLER_UID=`${SCRIPT_PATH}/uuid.sh`
WIN_INSTALLER_PACKAGE_CODE=`${SCRIPT_PATH}/uuid.sh`
SMARTSCOPE_IOS_PROJ="${PRJ_DIR}/SmartScope.iOS.csproj"
SMARTSCOPE_IOS_RELEASE_TAGS="
<CodesignKey>iPhone Distribution: Jasper van Bourgognie (392YQ3H5ZH)</CodesignKey>
<MtouchUseRefCounting>true</MtouchUseRefCounting>
<BuildIpa>true</BuildIpa>
<MtouchArch>ARMv7, ARM64</MtouchArch>
<IpaPackageName>labnation_smartscope.ipa</IpaPackageName>"
SMARTSCOPE_IOS_RELEASE_TAGS=$(sed -e 's/\//\\\//g;' <<<"$SMARTSCOPE_IOS_RELEASE_TAGS" | tr -d '\n')

echo ${SMARTSCOPE_IOS_RELEASE_TAGS}

echo Modifying files to build version ${VERSION_STRING}
# In SmartScope project
CUR_DIR="`pwd`"
cd ${PRJ_DIR}

TEMPLATE_EXTENSION=".tpl"
AUTOGENERATED_HEADER="Auto generated - to change these files, edit the ${TEMPLATE_EXTENSION} file"

echo "Generating Assembly info file ${ASSEMBLY_INFO}"
echo "// ${AUTOGENERATED_HEADER}" > ${ASSEMBLY_INFO}
cat ${ASSEMBLY_INFO}${TEMPLATE_EXTENSION} >> ${ASSEMBLY_INFO}
sed -i~ -e "s/^\[assembly: AssemblyVersion(\"0.0.0.0\")\]$/[assembly: AssemblyVersion(\"${VERSION_STRING}\")]/" ${ASSEMBLY_INFO}
sed -i~ -E -e "s/^\[assembly:[[:space:]]*AssemblyFileVersion\(\"[0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4}\"\)\][[:space:]]*$/[assembly: AssemblyFileVersion(\"${VERSION_STRING}\")]/" ${ASSEMBLY_INFO}

ASSEMBLY_INFO_FILES=(\
MonoGame/MonoGame.Framework/Properties/AssemblyInfo.cs \
decoders/Default/Properties/AssemblyInfo.cs \
decoders/Interfaces/Properties/AssemblyInfo.cs \
DeviceInterface/examples/MakerKit/Properties/AssemblyInfo.cs \
DeviceInterface/libs/common/Properties/AssemblyInfo.cs \
DeviceInterface/libs/LibUsbDotNet/Properties/AssemblyInfo.cs \
DeviceInterface/libs/matlab/Properties/AssemblyInfo.cs \
DeviceInterface/libs/winusb/WinUSBNet/Properties/AssemblyInfo.cs \
DeviceInterface/libs/Zeroconf/src/AssemblyInfo.cs \
DeviceInterface/src/Properties/AssemblyInfo.cs \
dropnet/DropNet/Properties/AssemblyInfo.cs \
)

if [ $CHANNEL != "None" ]; then
  for i in ${ASSEMBLY_INFO_FILES[@]}; do
    ASS_FILE=`basename $i`
    ASS_PATH=`dirname $i`
    cd $ASS_PATH
    git checkout -- $ASS_FILE
    sed -i~ -E -e "s/^\[assembly:[[:space:]]*AssemblyFileVersion\(\"[0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4}\"\)\][[:space:]]*$/[assembly: AssemblyFileVersion(\"${VERSION_STRING}\")]/" ${ASS_FILE}
    cd -
  done
fi

if [ $OPSYS = 'MacOS' ]; then
    echo "Generating MacOS plist file ${MACOS_PLIST}"
    cat ${MACOS_PLIST}${TEMPLATE_EXTENSION} > ${MACOS_PLIST}
    sed -i~ -e "s/VersionPlaceHolder/${VERSION_STRING}/" ${MACOS_PLIST}

    cat ${MACOS_SERVER_PLIST}${TEMPLATE_EXTENSION} > ${MACOS_SERVER_PLIST}
    sed -i~ -e "s/VersionPlaceHolder/${VERSION_STRING}/" ${MACOS_SERVER_PLIST}

    cat ${MACOS_SERVER_UI_PLIST}${TEMPLATE_EXTENSION} > ${MACOS_SERVER_UI_PLIST}
    sed -i~ -e "s/VersionPlaceHolder/${VERSION_STRING}/" ${MACOS_SERVER_UI_PLIST}

    cat ${MACOS_CONSOLE_PLIST}${TEMPLATE_EXTENSION} > ${MACOS_CONSOLE_PLIST}
    sed -i~ -e "s/VersionPlaceHolder/${VERSION_STRING}/" ${MACOS_CONSOLE_PLIST}
elif [ $OPSYS = 'iOS' ]; then
    echo "Generating iOS plist file ${IOS_PLIST}"
    cat ${IOS_PLIST}${TEMPLATE_EXTENSION} > ${IOS_PLIST}
    sed -i~ -e "s/VersionPlaceHolder/${VERSION_STRING_THREE_PARTS_IOS}/" ${IOS_PLIST}
    sed -i~ -e "s/VersionCodePlaceHolder/${VERSION_CODE}/" ${IOS_PLIST}
elif [ $OPSYS = 'Android' ]; then
    echo "Generating Android manifest ${ANDROID_MANIFEST}"
    cat ${ANDROID_MANIFEST}${TEMPLATE_EXTENSION} > ${ANDROID_MANIFEST}
    sed -i~ -e "s/android:versionName=\"0.0.0.0\"/android:versionName=\"${VERSION_STRING}\"/"  ${ANDROID_MANIFEST}
    sed -i~ -e "s/android:versionCode=\"0\"/android:versionCode=\"${VERSION_CODE}\"/"  ${ANDROID_MANIFEST}
elif [ $OPSYS = 'Windows' ] || [ $OPSYS = 'WindowsGL' ]; then
    cat ${WIN_INSTALLER}${TEMPLATE_EXTENSION} > ${WIN_INSTALLER}
    sed -i~ -e "s/\"ProductVersion\" = \"8:0.0.0\"/\"ProductVersion\" = \"8:${VERSION_STRING_WIN}\"/" ${WIN_INSTALLER}
    sed -i~ -e "s/\"PackageCode\" = \"8:PackageCodePlaceHolder\"/\"PackageCode\" = \"8:{${WIN_INSTALLER_PACKAGE_CODE}}\"/" ${WIN_INSTALLER}
    sed -i~ -e "s/\"ProductCode\" = \"8:GuidPlaceHolder\"/\"ProductCode\" = \"8:{${WIN_INSTALLER_UID}}\"/" ${WIN_INSTALLER}
fi

cd "${CUR_DIR}"

# Sanitise PNGs for Linux's MonoGame
if [ ${DOCLEAN} = true ]; then
  echo Sanitising Content PNGs
  CONTENT_DIR=./Content
  CONTENT_DIR_WORK=./Content_work
  rm -rf ${CONTENT_DIR_WORK}
  cp -r ${CONTENT_DIR} ${CONTENT_DIR_WORK}
  cd ${CONTENT_DIR_WORK}
  ${CMD_FIND} ./ -name \*.png -exec "${CMD_CONVERT}" {} \( +clone -alpha Extract \) -channel RGB -compose Multiply -composite PNG32:{}  \;
  cd -
fi

${CMD_PREFIX}Protobuild.exe --generate $OPSYS
SLN_FILE="SmartScope.$OPSYS.sln"
SLN_FILE_MODDED="${SLN_FILE}.modded.sln"

if [ $OPSYS = 'iOS' ]; then
    echo "Modifying SmartScope project for app-store"
    sed -i~ -e "s/== 'Release|iPhone' \">/== 'Release|iPhone' \">${SMARTSCOPE_IOS_RELEASE_TAGS}/" ${SMARTSCOPE_IOS_PROJ}
fi

#FIXME: this ain't very pretty but it seems too specific to
#file a Protobuild issue for InstallShield installers
if [ $OPSYS = 'Windows' ] || [ $OPSYS = 'WindowsGL' ]; then
	echo "adding installer project to solution"
	cat ${SLN_FILE} |
		sed s/postSolution/postSolution\\n\\t\\t{D3010D33-2848-4CB7-BCAE-09D1961155A4}.Release\|Any\ CPU.ActiveCfg\ =\ Release\\n\\t\\t{D3010D33-2848-4CB7-BCAE-09D1961155A4}.Release\|Any\ CPU.Build.0\ =\ Release/ |
		sed s/^Global$/Project\(\"{54435603-DBB4-11D2-8724-00A0C9A8B90C}\"\)\ \=\ \"SmartScopeInstaller\",\ \"Installer\\\\Installer.vdproj\",\ \"{D3010D33-2848-4CB7-BCAE-09D1961155A4}\"\\nEndProject\\nGlobal/ |
		cat > $SLN_FILE_MODDED
	mv $SLN_FILE_MODDED $SLN_FILE
fi

